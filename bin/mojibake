#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#.hashdot.args.pre = --1.9
#.hashdot.profile += jruby-shortlived

#--
# Copyright (c) 2011 David Kellum
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++

$LOAD_PATH.unshift File.join( File.dirname( __FILE__ ), "..", "lib" )

require 'mojibake'
require 'optparse'

module Script

  mapper = MojiBake::Mapper.new

  OptionParser.new do |opts|
    opts.banner = "Usage: mojibake [options] [InputFile]"
    opts.on( "-v", "--version", "Display version and exit" ) do
      puts "mojibake: #{MojiBake::VERSION}"
      exit 1
    end
    opts.on( "--no-windows-1252",
             "Don't include miscodings from Windows-1252" ) do
      mapper.map_windows_1252 = false
    end
    opts.on( "--no-iso-8859-1",
             "Don't include miscodings from ISO-8859-1" ) do
      mapper.map_iso_8859_1 = false
    end
    opts.on( "--no-permutations",
             "Don't include ISO/Windows permutations" ) do
      mapper.map_permutations = false
    end
    opts.on_tail( "-t", "--table",
                  "Display MojiBake Mapper table (UTF-8) and exit" ) do
      puts mapper.table
      exit 1
    end
    opts.on_tail( "-r", "--regex",
                  "Display MojiBake Mapper regex (UTF-8) and exit" ) do
      puts mapper.regexp.inspect
      exit 1
    end
    opts.on_tail( "-h", "--help", "Show help and exit" ) do
      puts opts
      puts
      puts( "Recover InputFile and writes to STDOUT." )
      exit 1
    end
  end.parse!

  input_file = ARGV.shift
  if input_file
    $stdout.write( mapper.recover( IO.read( input_file ).encode( 'UTF-8' ) ) )
  end

end
